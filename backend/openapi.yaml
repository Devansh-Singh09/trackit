openapi: 3.1.0
info:
  title: Trackit API
  version: 1.0.0
  description: API for managing shipments in the Trackit application.

servers:
  - url: https://trackit-5jqo.onrender.com/
    description: Production server

components:
  schemas:
    Shipment:
      type: object
      properties:
        _id:
          type: string
          description: The unique identifier for the shipment.
          example: 60d5f2b4a1b2c3d4e5f6g7h8
        user:
          type: string
          description: The ID of the user who created the shipment.
          example: 60d5f2b4a1b2c3d4e5f6g7h9
        title:
          type: string
          description: The title of the shipment.
          example: My First Shipment
        status:
          type: string
          description: The status of the shipment.
          enum: [Pending, In Transit, Delivered]
          example: Pending
        isInsured:
          type: boolean
          description: Whether the shipment is insured.
          example: false
        weight:
          type: number
          description: The weight of the shipment in kg.
          example: 10
        distance:
          type: number
          description: The distance for the shipment in km.
          example: 100
        shippingCost:
          type: number
          description: The calculated shipping cost.
          example: 500
        origin:
          type: string
          description: The origin of the shipment.
          example: New York
        destination:
          type: string
          description: The destination of the shipment.
          example: Los Angeles
      required:
        - title
        - weight
        - distance
        - origin
        - destination

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /api/shipments:
    get:
      summary: Get all shipments
      description: Retrieve a paginated list of shipments for the logged-in user. Supports filtering, searching, and sorting.
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: The page number for pagination.
        - in: query
          name: limit
          schema:
            type: integer
            default: 5
          description: The number of items per page.
        - in: query
          name: status
          schema:
            type: string
            enum: [Pending, In Transit, Delivered]
          description: Filter shipments by status.
        - in: query
          name: searchField
          schema:
            type: string
            enum: [_id, title]
          description: The field to search by.
        - in: query
          name: searchTerm
          schema:
            type: string
          description: The term to search for.
        - in: query
          name: sort
          schema:
            type: string
            enum: [title, shippingCost]
          description: The field to sort by.
      responses:
        '200':
          description: A list of shipments.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Shipment'
                  metadata:
                    type: object
                    properties:
                      totalItems:
                        type: integer
                      totalPages:
                        type: integer
                      currentPage:
                        type: integer
        '401':
          description: Unauthorized. No token provided or invalid token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: Not authorized, no token
        '500':
          description: Internal server error. An error occurred while fetching shipments.

    post:
      summary: Create a new shipment
      description: Create a new shipment for the logged-in user. Admins are not allowed to create shipments.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                weight:
                  type: number
                distance:
                  type: number
                isInsured:
                  type: boolean
                origin:
                  type: string
                destination:
                  type: string
              required:
                - title
                - weight
                - origin
                - destination
            examples:
              success:
                summary: A successful request
                value:
                  title: New Shipment
                  weight: 20
                  origin: New York
                  destination: Los Angeles
              validation_error:
                summary: A request with missing fields
                value:
                  weight: 20
      responses:
        '201':
          description: Shipment created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    $ref: '#/components/schemas/Shipment'
        '400':
          description: Bad request. Missing origin, destination, API key, or invalid distance calculation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: Origin, destination, and API key are required.
        '403':
          description: Forbidden. Admins are not allowed to create shipments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: Admins are not allowed to create shipments
        '401':
          description: Unauthorized. No token provided or invalid token.
        '500':
          description: Internal server error. An error occurred while creating the shipment.

  /api/shipments/{id}:
    get:
      summary: Get a shipment by ID
      description: Retrieve a single shipment by its ID.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the shipment to retrieve.
      responses:
        '200':
          description: The requested shipment.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Shipment'
        '401':
          description: Unauthorized. No token provided or invalid token.
        '404':
          description: Shipment not found.
        '500':
          description: Internal server error. An error occurred while fetching the shipment.

    put:
      summary: Update a shipment
      description: Update an existing shipment. Only admins can update status, and only specific status transitions are allowed.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the shipment to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [Pending, In Transit, Delivered]
              required:
                - status
            example:
              status: In Transit
      responses:
        '200':
          description: Shipment updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Shipment'
        '400':
          description: Bad request. Invalid status transition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: Invalid status transition from Pending to Delivered
        '401':
          description: Unauthorized. No token provided or invalid token.
        '403':
          description: Forbidden. Not authorized to update this shipment (non-admins).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: Not authorized to update this shipment
        '404':
          description: Shipment not found.
        '500':
          description: Internal server error. An error occurred while updating the shipment.

    delete:
      summary: Delete a shipment
      description: Delete an existing shipment. Only admins are authorized to delete shipments.
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the shipment to delete.
      responses:
        '200':
          description: Shipment deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
        '401':
          description: Unauthorized. No token provided or invalid token.
        '403':
          description: Forbidden. Not authorized to delete this shipment (non-admins).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                success: false
                message: Not authorized to delete this shipment
        '404':
          description: Shipment not found.
        '500':
          description: Internal server error. An error occurred while deleting the shipment.

  /api/users/signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: User created successfully.
        '400':
          description: Bad request. Username and password are required or user already exists.
        '500':
          description: Internal server error. An error occurred during signup.
  /api/users/login:
    post:
      summary: Log in a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Successful login, returns a JWT token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  token:
                    type: string
        '400':
          description: Bad request. Username and password are required.
        '401':
          description: Unauthorized. Invalid username or password.
        '500':
          description: Internal server error. An error occurred during login.
  /api/users/logout:
    post:
      summary: Log out a user
      responses:
        '200':
          description: Logout successful.
